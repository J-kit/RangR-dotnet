<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using RangR.Maths.Subtraction;
namespace RangR.Maths.Subtraction
{

<#

var types = new Type[]
{
    typeof(Byte),
    typeof(Decimal),
    typeof(Double),
    typeof(Int16),
    typeof(Int32),
    typeof(Int64),
    typeof(SByte),
    typeof(Single),
    typeof(UInt16),
    typeof(UInt32),
    typeof(UInt64),
    typeof(TimeSpan),
};



#>
    public static class AutoSubtractor
    {
        static AutoSubtractor()
        {
<#
        foreach (var type in types)
        {
            base.ClearIndent();
          
#>             Subtractor<<#= type.Name #>>.Default = new  <#= type.Name #>Subtractor();<#
            WriteLine("\t");
        }
        #>
            
        }

        internal static void EnsureInitialized()
        {
            // Just trigger the static initialization
        }
    }
<#

foreach (var type in types)
{
   //WriteLine(type.Name);
   base.ClearIndent();
   WriteLine("");
    #>
    public class  <#= type.Name #>Subtractor : Subtractor<<#= type.Name #>>
    {
        public override <#= type.Name #> Subtract(<#= type.Name #> v1, <#= type.Name #> v2)
        {
            return (<#= type.Name #>)(v1 - v2);
        }
    }
    <#

}



#>

}